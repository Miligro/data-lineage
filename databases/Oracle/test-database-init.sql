create user C##DATA_LINEAGE identified by "Oracle123";
alter user C##DATA_LINEAGE quota unlimited on users;
grant create session, create table, create view to C##DATA_LINEAGE;
grant select on dba_users to C##DATA_LINEAGE;
grant select on dba_tables to C##DATA_LINEAGE;
grant select on DBA_MVIEWS to C##DATA_LINEAGE;

alter session set current_schema = C##DATA_LINEAGE;

CREATE TABLE patients (
    patient_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    date_of_birth DATE,
    gender VARCHAR2(10),
    phone VARCHAR2(15),
    age NUMBER,
    email VARCHAR2(100),
    address CLOB,
    insurance_id VARCHAR2(50),
    emergency_contact VARCHAR2(100)
);

CREATE TABLE insurance (
    insurance_id VARCHAR2(50) PRIMARY KEY,
    provider_name VARCHAR2(100),
    policy_number VARCHAR2(50),
    coverage_details CLOB
);

CREATE TABLE staff (
    staff_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    role VARCHAR2(50),
    department_id NUMBER,
    phone VARCHAR2(15),
    email VARCHAR2(100),
    address CLOB,
    date_of_joining DATE,
    salary NUMBER(10, 2)
);

CREATE TABLE departments (
    department_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    department_name VARCHAR2(50),
    location VARCHAR2(100)
);

CREATE TABLE shifts (
    shift_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    staff_id NUMBER REFERENCES staff(staff_id),
    shift_date DATE,
    start_time TIMESTAMP,
    end_time TIMESTAMP
);

CREATE TABLE appointments (
    appointment_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    staff_id NUMBER REFERENCES staff(staff_id),
    appointment_date DATE,
    appointment_time TIMESTAMP,
    reason CLOB,
    status VARCHAR2(20)
);

CREATE TABLE appointment_status (
    status VARCHAR2(20) PRIMARY KEY,
    description CLOB
);

CREATE TABLE medical_records (
    record_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    staff_id NUMBER REFERENCES staff(staff_id),
    record_date DATE,
    diagnosis CLOB,
    treatment CLOB,
    prescription CLOB,
    follow_up_date DATE
);

CREATE TABLE prescriptions (
    prescription_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    record_id NUMBER REFERENCES medical_records(record_id),
    medication_name VARCHAR2(100),
    dosage VARCHAR2(50),
    frequency VARCHAR2(50),
    duration VARCHAR2(50)
);

CREATE TABLE billing (
    bill_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    bill_date DATE,
    amount NUMBER(10, 2),
    status VARCHAR2(20)
);

CREATE TABLE payment_methods (
    method_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    method_name VARCHAR2(50)
);

CREATE TABLE payments (
    payment_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    bill_id NUMBER REFERENCES billing(bill_id),
    payment_date DATE,
    amount NUMBER(10, 2),
    method_id NUMBER REFERENCES payment_methods(method_id)
);

CREATE TABLE inventory (
    item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    item_name VARCHAR2(100),
    category VARCHAR2(50),
    quantity NUMBER,
    unit_price NUMBER(10, 2),
    supplier_id NUMBER
);

CREATE TABLE suppliers (
    supplier_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    supplier_name VARCHAR2(100),
    contact_name VARCHAR2(100),
    phone VARCHAR2(15),
    email VARCHAR2(100),
    address CLOB
);

CREATE TABLE orders (
    order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    supplier_id NUMBER REFERENCES suppliers(supplier_id),
    order_date DATE,
    total_amount NUMBER(10, 2),
    status VARCHAR2(20)
);

CREATE TABLE order_items (
    order_item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    order_id NUMBER REFERENCES orders(order_id),
    item_id NUMBER REFERENCES inventory(item_id),
    quantity NUMBER,
    unit_price NUMBER(10, 2)
);

CREATE OR REPLACE VIEW patient_appointments AS
SELECT
    p.patient_id,
    p.first_name,
    p.last_name,
    a.appointment_id,
    a.appointment_date,
    a.appointment_time,
    a.reason,
    a.status
FROM
    patients p
JOIN
    appointments a ON p.patient_id = a.patient_id;

CREATE OR REPLACE VIEW staff_schedule AS
SELECT
    s.staff_id,
    s.first_name,
    s.last_name,
    sh.shift_id,
    sh.shift_date,
    sh.start_time,
    sh.end_time
FROM
    staff s
JOIN
    shifts sh ON s.staff_id = sh.staff_id;

CREATE OR REPLACE VIEW billing_summary AS
SELECT
    b.bill_id,
    p.patient_id,
    p.first_name,
    p.last_name,
    b.bill_date,
    b.amount,
    b.status
FROM
    billing b
JOIN
    patients p ON b.patient_id = p.patient_id;

CREATE OR REPLACE VIEW inventory_status AS
SELECT
    i.item_id,
    i.item_name,
    i.category,
    i.quantity,
    i.unit_price,
    s.supplier_name
FROM
    inventory i
JOIN
    suppliers s ON i.supplier_id = s.supplier_id;

CREATE OR REPLACE VIEW prescription_details AS
SELECT
    pr.prescription_id,
    mr.record_id,
    mr.patient_id,
    mr.staff_id,
    pr.medication_name,
    pr.dosage,
    pr.frequency,
    pr.duration
FROM
    prescriptions pr
JOIN
    medical_records mr ON pr.record_id = mr.record_id;

CREATE OR REPLACE VIEW staff_details AS
SELECT
    s.staff_id,
    s.first_name,
    s.last_name,
    s.role,
    d.department_name,
    s.phone,
    s.email,
    s.date_of_joining
FROM
    staff s
JOIN
    departments d ON s.department_id = d.department_id;

CREATE OR REPLACE VIEW patient_medical_history AS
SELECT
    p.patient_id,
    p.first_name,
    p.last_name,
    mr.record_id,
    mr.record_date,
    mr.diagnosis,
    mr.treatment,
    mr.prescription,
    mr.follow_up_date
FROM
    patients p
JOIN
    medical_records mr ON p.patient_id = mr.patient_id;

CREATE INDEX idx_patients_last_name ON patients(last_name);
CREATE INDEX idx_staff_last_name ON staff(last_name);
CREATE INDEX idx_appointments_date ON appointments(appointment_date);
CREATE INDEX idx_medical_records_date ON medical_records(record_date);
CREATE INDEX idx_billing_date ON billing(bill_date);
CREATE INDEX idx_inventory_category ON inventory(category);

CREATE TABLE lab_tests (
    test_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    test_name VARCHAR2(100),
    description CLOB,
    normal_range VARCHAR2(50)
);

CREATE TABLE patient_tests (
    patient_test_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    test_id NUMBER REFERENCES lab_tests(test_id),
    test_date DATE,
    result VARCHAR2(100),
    status VARCHAR2(20)
);

CREATE TABLE radiology_tests (
    radiology_test_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    test_name VARCHAR2(100),
    description CLOB
);

CREATE TABLE patient_radiology (
    patient_radiology_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    radiology_test_id NUMBER REFERENCES radiology_tests(radiology_test_id),
    test_date DATE,
    result CLOB,
    status VARCHAR2(20)
);

CREATE TABLE surgeries (
    surgery_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    surgery_name VARCHAR2(100),
    description CLOB
);

CREATE TABLE patient_surgeries (
    patient_surgery_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    surgery_id NUMBER REFERENCES surgeries(surgery_id),
    surgery_date DATE,
    outcome CLOB,
    status VARCHAR2(20)
);

CREATE TABLE referrals (
    referral_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    referring_staff_id NUMBER REFERENCES staff(staff_id),
    referred_to_staff_id NUMBER REFERENCES staff(staff_id),
    referral_date DATE,
    reason CLOB,
    status VARCHAR2(20)
);

CREATE TABLE feedback (
    feedback_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    staff_id NUMBER REFERENCES staff(staff_id),
    feedback_date DATE,
    feedback CLOB,
    rating NUMBER CHECK (rating BETWEEN 1 AND 5)
);

CREATE TABLE vaccinations (
    vaccination_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    vaccine_name VARCHAR2(100),
    description CLOB,
    manufacturer VARCHAR2(100)
);

CREATE TABLE patient_vaccinations (
    patient_vaccination_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    vaccination_id NUMBER REFERENCES vaccinations(vaccination_id),
    vaccination_date DATE,
    dose_number NUMBER,
    administered_by_staff_id NUMBER REFERENCES staff(staff_id)
);

CREATE TABLE allergies (
    allergy_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    allergy_name VARCHAR2(100),
    description CLOB
);

CREATE TABLE patient_allergies (
    patient_allergy_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    allergy_id NUMBER REFERENCES allergies(allergy_id),
    reaction VARCHAR2(100),
    severity VARCHAR2(50)
);

CREATE TABLE chronic_conditions (
    condition_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    condition_name VARCHAR2(100),
    description CLOB
);

CREATE TABLE patient_conditions (
    patient_condition_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    condition_id NUMBER REFERENCES chronic_conditions(condition_id),
    diagnosis_date DATE,
    status VARCHAR2(20)
);

CREATE TABLE immunizations (
    immunization_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    immunization_name VARCHAR2(100),
    description CLOB
);

CREATE TABLE patient_immunizations (
    patient_immunization_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    immunization_id NUMBER REFERENCES immunizations(immunization_id),
    immunization_date DATE,
    administered_by_staff_id NUMBER REFERENCES staff(staff_id)
);

CREATE TABLE wards (
    ward_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ward_name VARCHAR2(50),
    location VARCHAR2(100),
    capacity NUMBER
);

CREATE TABLE beds (
    bed_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    ward_id NUMBER REFERENCES wards(ward_id),
    bed_number VARCHAR2(10),
    status VARCHAR2(20)
);

CREATE TABLE patient_beds (
    patient_bed_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    bed_id NUMBER REFERENCES beds(bed_id),
    admission_date DATE,
    discharge_date DATE,
    status VARCHAR2(20)
);

CREATE TABLE dietary_plans (
    dietary_plan_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    plan_name VARCHAR2(100),
    description CLOB
);

CREATE TABLE patient_dietary_plans (
    patient_dietary_plan_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    dietary_plan_id NUMBER REFERENCES dietary_plans(dietary_plan_id),
    start_date DATE,
    end_date DATE,
    status VARCHAR2(20)
);

CREATE TABLE insurance_claims (
    claim_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    insurance_id VARCHAR2(50) REFERENCES insurance(insurance_id),
    patient_id NUMBER REFERENCES patients(patient_id),
    bill_id NUMBER REFERENCES billing(bill_id),
    claim_date DATE,
    amount_claimed NUMBER(10, 2),
    amount_approved NUMBER(10, 2),
    status VARCHAR2(20)
);

CREATE TABLE medications (
    medication_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    medication_name VARCHAR2(100),
    description CLOB,
    stock NUMBER,
    unit_price NUMBER(10, 2)
);

CREATE TABLE patient_medications (
    patient_medication_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    medication_id NUMBER REFERENCES medications(medication_id),
    prescription_date DATE,
    dosage VARCHAR2(50),
    frequency VARCHAR2(50),
    duration VARCHAR2(50)
);

CREATE TABLE supplier_orders (
    supplier_order_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    supplier_id NUMBER REFERENCES suppliers(supplier_id),
    order_date DATE,
    total_amount NUMBER(10, 2),
    status VARCHAR2(20)
);

CREATE TABLE supplier_order_items (
    supplier_order_item_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    supplier_order_id NUMBER REFERENCES supplier_orders(supplier_order_id),
    item_id NUMBER REFERENCES inventory(item_id),
    quantity NUMBER,
    unit_price NUMBER(10, 2)
);

CREATE TABLE equipment (
    equipment_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    equipment_name VARCHAR2(100),
    category VARCHAR2(50),
    purchase_date DATE,
    status VARCHAR2(20)
);

CREATE TABLE maintenance (
    maintenance_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    equipment_id NUMBER REFERENCES equipment(equipment_id),
    maintenance_date DATE,
    description CLOB,
    cost NUMBER(10, 2),
    performed_by_staff_id NUMBER REFERENCES staff(staff_id)
);

CREATE TABLE blood_types (
    blood_type_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    blood_type VARCHAR2(5)
);

CREATE TABLE blood_donations (
    donation_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    donor_name VARCHAR2(100),
    blood_type_id NUMBER REFERENCES blood_types(blood_type_id),
    donation_date DATE,
    quantity NUMBER
);

CREATE TABLE patient_blood_transfusions (
    transfusion_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    patient_id NUMBER REFERENCES patients(patient_id),
    blood_type_id NUMBER REFERENCES blood_types(blood_type_id),
    transfusion_date DATE,
    quantity NUMBER,
    performed_by_staff_id NUMBER REFERENCES staff(staff_id)
);

CREATE OR REPLACE VIEW patient_lab_tests AS
SELECT
    p.patient_id,
    p.first_name,
    p.last_name,
    pt.patient_test_id,
    lt.test_name,
    pt.test_date,
    pt.result,
    pt.status
FROM
    patients p
JOIN
    patient_tests pt ON p.patient_id = pt.patient_id
JOIN
    lab_tests lt ON pt.test_id = lt.test_id;

CREATE OR REPLACE VIEW patient_radiology_tests AS
SELECT
    p.patient_id,
    p.first_name,
    p.last_name,
    pr.patient_radiology_id,
    rt.test_name,
    pr.test_date,
    pr.result,
    pr.status
FROM
    patients p
JOIN
    patient_radiology pr ON p.patient_id = pr.patient_id
JOIN
    radiology_tests rt ON pr.radiology_test_id = rt.radiology_test_id;

CREATE OR REPLACE VIEW patient_surgeries_details AS
SELECT
    p.patient_id,
    p.first_name,
    p.last_name,
    ps.patient_surgery_id,
    s.surgery_name,
    ps.surgery_date,
    ps.outcome,
    ps.status
FROM
    patients p
JOIN
    patient_surgeries ps ON p.patient_id = ps.patient_id
JOIN
    surgeries s ON ps.surgery_id = s.surgery_id;

CREATE OR REPLACE VIEW patient_referrals AS
SELECT
    r.referral_id,
    r.patient_id,
    p.first_name,
    p.last_name,
    r.referring_staff_id,
    rs.first_name AS referring_first_name,
    rs.last_name AS referring_last_name,
    r.referred_to_staff_id,
    rt.first_name AS referred_first_name,
    rt.last_name AS referred_last_name,
    r.referral_date,
    r.reason,
    r.status
FROM
    referrals r
JOIN
    patients p ON r.patient_id = p.patient_id
JOIN
    staff rs ON r.referring_staff_id = rs.staff_id
JOIN
    staff rt ON r.referred_to_staff_id = rt.staff_id;

CREATE OR REPLACE VIEW patient_feedback_details AS
SELECT
    f.feedback_id,
    f.patient_id,
    p.first_name,
    p.last_name,
    f.staff_id,
    s.first_name AS staff_first_name,
    s.last_name AS staff_last_name,
    f.feedback_date,
    f.feedback,
    f.rating
FROM
    feedback f
JOIN
    patients p ON f.patient_id = p.patient_id
JOIN
    staff s ON f.staff_id = s.staff_id;

CREATE OR REPLACE VIEW patient_vaccinations_details AS
SELECT
    pv.patient_vaccination_id,
    pv.patient_id,
    p.first_name,
    p.last_name,
    pv.vaccination_id,
    v.vaccine_name,
    pv.vaccination_date,
    pv.dose_number,
    pv.administered_by_staff_id,
    s.first_name AS staff_first_name,
    s.last_name AS staff_last_name
FROM
    patient_vaccinations pv
JOIN
    patients p ON pv.patient_id = p.patient_id
JOIN
    vaccinations v ON pv.vaccination_id = v.vaccination_id
JOIN
    staff s ON pv.administered_by_staff_id = s.staff_id;

CREATE GLOBAL TEMPORARY TABLE temp_female_patients ON COMMIT DELETE ROWS AS
    SELECT * FROM patients
    WHERE gender = 'Female';

CREATE TABLE female_patients AS SELECT * FROM temp_female_patients;

CREATE OR REPLACE FUNCTION calculate_age(birth_date DATE)
RETURN NUMBER IS
BEGIN
    RETURN EXTRACT(YEAR FROM (SYSDATE - birth_date)) - 1970;
END calculate_age;
/

CREATE OR REPLACE FUNCTION get_patient_full_name(patient NUMBER)
RETURN VARCHAR2 IS
    full_name VARCHAR2(200);
BEGIN
    SELECT first_name || ' ' || last_name INTO full_name
    FROM patients
    WHERE patient_id = patient;

    RETURN full_name;
END get_patient_full_name;
/

CREATE OR REPLACE PROCEDURE add_new_patient(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_dob IN DATE,
    p_gender IN VARCHAR2,
    p_phone IN VARCHAR2,
    p_email IN VARCHAR2,
    p_address IN CLOB,
    p_insurance_id IN VARCHAR2,
    p_emergency_contact IN VARCHAR2
)
IS
BEGIN
    INSERT INTO patients (
        first_name, last_name, date_of_birth, gender, phone, email, address, insurance_id, emergency_contact
    ) VALUES (
        p_first_name, p_last_name, p_dob, p_gender, p_phone, p_email, p_address, p_insurance_id, p_emergency_contact
    );
END add_new_patient;
/

CREATE OR REPLACE PROCEDURE update_patient_age(patient IN NUMBER)
IS
    birth_date DATE;
    age NUMBER;
BEGIN
    SELECT date_of_birth INTO birth_date
    FROM patients
    WHERE patient_id = patient;

    age := calculate_age(birth_date);

    UPDATE patients
    SET age = age
    WHERE patient_id = patient;

    get_patient_full_name(patient);
END update_patient_age;
/

CREATE OR REPLACE PROCEDURE create_and_populate_new_table
IS
BEGIN
    EXECUTE IMMEDIATE 'CREATE GLOBAL TEMPORARY TABLE temp_patient_data ON COMMIT DELETE ROWS AS
    SELECT * FROM patients WHERE gender = ''Female''';

    EXECUTE IMMEDIATE 'CREATE TABLE female_patients AS
    SELECT * FROM temp_patient_data';

    INSERT INTO female_patients (first_name, last_name, date_of_birth, gender, phone, email, address, insurance_id, emergency_contact)
    VALUES ('Jane', 'Doe', DATE '1980-05-05', 'Female', '1234567890', 'jane.doe@example.com', '123 Main St', 'INS123', 'John Doe');

    EXECUTE IMMEDIATE 'DROP TABLE temp_patient_data';
END create_and_populate_new_table;
/
